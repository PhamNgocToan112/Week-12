#include<iostream>
#include<cstring>
using namespace std;

struct Node {
	string data;
	Node* next;
};

struct SLinkedList {
	Node* head;
	Node* tail;
	int size;
	SLinkedList() {
		head = NULL;
		tail = NULL;

		size = 0;
	}

	~SLinkedList() {
		delete head;
		delete tail;
	}

	void addFirst(string s) {
		Node* tmp = new Node;
		tmp->data = s;
		tmp->next = head;

		head = tmp;
	}

	void addLast(string s) {
		Node* tmp = new Node;
		tmp->data = s;
		tmp->next = NULL;
		if (head == NULL) {
			head = tmp;
			tail = tmp;
		}
		else {
			tail = head;
			while (tail->next != NULL) {
				tail = tail->next;
			}
			tail->next = tmp;
			tail = tmp;
		}
	}

	void printf() {
		Node* temp = head;
		if (temp == NULL)cout << "Linked list is empty";
		while (temp != NULL) {
			cout << temp->data << " ";
			temp = temp->next;
		}
		cout << endl;
	}

	void removeFirst(){
		if (head == NULL) {
			cout << "Linked list is empty" << endl;
		}
		else {
			Node* temp = head;
			head = head->next;
			delete temp;
		}
	}

	void removeLast() {
		if (head == NULL) {
			cout << "Linked list is empty" << endl;
		}
		else {
			Node* second_last = head;
			while (second_last->next->next != NULL) {
				second_last = second_last->next;
			}
			delete (second_last->next);
		}
	}

	void destructor() {
		Node* temp ;
		while (head != NULL) {
			temp = head;
			head = head->next;
			delete temp;
			
		}
	}

	void insertAfter(Node* p, const char* s) {
		Node* temp = new Node;
		temp->data = s;
		temp->next = p->next;
		p->next = temp;

	}

	string remove(Node* p) {
		string s = p->data;
		Node* pre = head;
		while (pre->next != p) {
			pre = pre->next;
		}
		pre->next = p->next;
		
		delete p;
		return s;
	}



};

void TestA1(){
	string s;
	
	SLinkedList TestA1;
	
	cin >> s;
	TestA1.addFirst(s);
	TestA1.printf();

	cin >> s;
	TestA1.addLast(s);
	TestA1.printf();
}

void TestA2() {
	string s;
	cin >> s;
	SLinkedList TestA2;

	for (int i = 0; i < 3; i++) {
		TestA2.addFirst(s);
	}
	TestA2.printf();

	TestA2.removeFirst();
	TestA2.printf();
	TestA2.removeFirst();
	TestA2.printf();
	TestA2.removeFirst();
	TestA2.printf();

}

void TestA3(){
	string s;

	cin >> s;
	SLinkedList TestA3;

	for (int i = 0; i < 3; i++) {
		TestA3.addFirst(s);
	}
	TestA3.printf();
	TestA3.destructor();
	TestA3.printf();
}

void TestA4() {
	string s;
	cin >> s;
	SLinkedList TestA4;

	for (int i = 0; i < 4; i++) {
		TestA4.addFirst(s);
	}
	TestA4.printf();

	TestA4.removeFirst();
	TestA4.printf();
	TestA4.removeFirst();
	TestA4.printf();
	TestA4.removeFirst();
	TestA4.printf();
	TestA4.removeFirst();
	TestA4.printf();
}

void TestA5() {
	string s;

	cin >> s;
	SLinkedList TestA5;

	for (int i = 0; i < 3; i++) {
		TestA5.addFirst(s);
	}
	
	TestA5.printf();
	
	Node* p = TestA5.head->next->next;
	TestA5.insertAfter(p, "insert");
	TestA5.printf();
}

void Test6() {

	SLinkedList TestA6;

	TestA6.addFirst("abc");
	TestA6.addFirst("def");
	TestA6.addFirst("ijk");

	TestA6.printf();

	Node* p = TestA6.head->next;
	cout << TestA6.remove(p) << endl;
	
	TestA6.printf();
}


int main() {
	
	TestA1();
	TestA2();
	TestA3();
	TestA4();
	TestA5();
	TestA6();

	
	return 0;
}
